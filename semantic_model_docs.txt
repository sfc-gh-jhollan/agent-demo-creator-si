Cortex Analyst semantic model specification

Logical table-level concepts
A logical table is a foundational concept of Snowflake’s semantic model. It represents either a physical database table or a view. It typically corresponds to business entities (such as customers, orders, or suppliers) or dimensions (such as location or time). Each row in a logical table represents typically represents a unique instance of the entity, such as a customer ID.

Logical tables contain the following kinds of columns:

Facts (quantitative data about business events)

Dimensions (who, what, where, and how)

Time (when the event occurred)

Filters associated with the logical table to allow query results to be limited to specific data subsets.

You can define metrics by using aggregations or combinations of other logical objects.

The following examples use the TPC-H schema, which includes the LINEITEM fact table. For a complete YAML implementation, download the snow_tpch file.

TPC-H schema showing the relationship between the LINEITEM fact table and the DIMENSIONS tables.
All of the following logical table-level examples belong to the order_lineitems logical table.

tables:
  - name: order_lineitems
    description: >
      The order line items table contains detailed information about each item within an
      order, including quantities, pricing, and dates.

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: LINEITEM
    primary_key:
      columns:
        - order_key
        - order_lineitem_number
A dimension represents categorical data that provides context to facts, such as product, customer, or location information. Dimensions typically contain descriptive text values, such as product names or customer addresses. They are used to filter, group, and label facts in analyses and reports.

A time dimension provides temporal context for analyzing facts across different periods. It enables tracking metrics over specific time intervals (dates, months, years) and supports analyses such as trend identification and period-over-period comparisons.

time_dimensions:
  - name: shipment_duration
    synonyms:
      - "shipping time"
      - "shipment time"
    description: The time it takes for items to be shipped.

    expr: DATEDIFF(day, lineitem.L_SHIPDATE, lineitem.L_RECEIPTDATE)
    data_type: NUMBER
    unique: false
Facts are measurable, quantitative data that provide context for analyses. Facts represent numeric values related to business processes, such as sales, cost, or quantity. A fact is an unaggregated, row-level concept.

# Fact columns in the logical table.
facts:
  - name: net_revenue
    synonyms:
      - "revenue after discount"
      - "net sales"
    description: Net revenue after applying discounts.

    expr: lineitem.L_EXTENDEDPRICE * (1 - lineitem.L_DISCOUNT)
    data_type: NUMBER
A filter is a condition that limits query results to specific data subsets based on criteria such as time period, location, or category.

- name: north_america
  synonyms:
    - "NA"
    - "North America region"
  description: >
    Filter to restrict data to orders from North America.
  comments: Used for analysis focusing on North American customers.
  expr: nation.N_NAME IN ('Canada', 'Mexico', 'United States')
A metric is a quantifiable measure of business performance, typically calculated by aggregating facts across multiple rows. You express a metric as a SQL formula that can combine multiple logical objects and aggregate functions, such as SUM() or AVG(). You can use metrics as key performance indicators (KPIs) in reports and dashboards. Define metrics at their most granular level for aggregation at higher levels. For example, define total_revenue at the lineitem level to allow aggregation by customer, supplier, or region.

  metrics:

# Simple metric referencing objects from the same logical table
- name: total_revenue
  expr: SUM(lineitem.l_extendedprice * (1 - lineitem.l_discount))

# Complex metric referencing objects from multiple logical tables.
# The relationships between tables have been defined below.
- name: total_profit_margin
  description: >
              The profit margin from orders. This metric is not additive
              and should always be calculated directly from the base tables.
  expr: (SUM(order_lineitems.net_revenue) -
        SUM(part_suppliers.part_supplier_cost * order_lineitems.lineitem_quantity))
        / SUM(order_lineitems.net_revenue)
Allowed references
Expressions for dimensions, facts, metrics, or filters can reference:

Physical columns from their own base table

Logical columns within the same logical table

Logical columns from other logical tables in the semantic model

Note

Expressions can’t reference physical columns from other physical tables.

Model level concepts
Relationships connect logical tables through joins on shared keys. For example, there could be a relationship between the customers and orders tables through a join on the customer_id column. You can use joins to analyze order data with customer attributes.

relationships:

  # Relationship between orders and lineitems
  - name: order_lineitems_to_orders
    left_table: order_lineitems
    right_table: orders
    relationship_columns:
      - left_column: order_key
        right_column: order_key
    join_type: left_outer
    relationship_type: many_to_one

  # Relationship between lineitems and partsuppliers
  - name: order_lineitems_to_part_suppliers
    left_table: order_lineitems
    right_table: part_suppliers
    # The relationship requires equality of multiple columns from each table
    relationship_columns:
      - left_column: part_key
        right_column: part_key
      - left_column: supplier_key
        right_column: supplier_key
    join_type: left_outer
    relationship_type: many_to_one
A verified query repository (VQR) is a collection of questions and corresponding SQL queries that are verified to be correct. You can use the queries to help improve the accuracy of Cortex Analyst’s’ results.

You can use Custom instructions in Cortex Analyst to have greater control over Cortex Analyst’s SQL query generation. Within the custom instructions, you provide the unique context of your business to the LLM.

Cortex Analyst semantic models are spefified in YAML. The model provides the necessary semantic information to answer natural language questions with high precision.

YAML format
YAML is balanced between human readability and precision. Business users can understand it while data engineers and analysts can define technical concepts clearly.

The general syntax of a Cortex Analyst semantic model is:

# Name and description of the semantic model.
name: <name>
description: <string>
comments: <string>

# Logical table-level concepts

# A semantic model can contain one or more logical tables.
tables:

  # A logical table on top of a base table.
  - name: <name>
    description: <string>


    # The fully qualified name of the base table.
    base_table:
      database: <database>
      schema: <schema>
      table: <base table name>

    # Dimension columns in the logical table.
    dimensions:
      - name: <name>
        synonyms: <array of strings>
        description: <string>

        expr: <SQL expression>
        data_type: <data type>
        unique: <boolean>
        cortex_search_service:
          service: <string>
          literal_column: <string>
          database: <string>
          schema: <string>
        is_enum: <boolean>


    # Time dimension columns in the logical table.
    time_dimensions:
      - name: <name>
        synonyms:  <array of strings>
        description: <string>

        expr: <SQL expression>
        data_type: <data type>
        unique: <boolean>

    # Fact columns in the logical table.
    facts:
      - name: <name>
        synonyms: <array of strings>
        description: <string>

        expr: <SQL expression>
        data_type: <data type>


    # Business metrics across logical objects
    metrics:
      - name: <name>
        synonyms: <array of strings>
        description: <string>

        expr: <SQL expression>


    # Commonly used filters over the logical table.
    filters:
      - name: <name>
        synonyms: <array of strings>
        description: <string>

        expr: <SQL expression>



# Model-level concepts

# Relationships between logical tables
relationships:
  - name: <string>

    left_table: <table>
    right_table: <table>
    relationship_columns:
      - left_column: <column>
        right_column: <column>
      - left_column: <column>
        right_column: <column>
    join_type: <left_outer | inner>
    relationship_type: < one_to_one | many_to_one>


# Additional context concepts

#  Verified queries with example questions and queries that answer them
verified_queries:
# Verified Query (1 of n)
  - name:        # A descriptive name of the query.

    question:    # The natural language question that this query answers.
    verified_at: # Optional: Time (in seconds since the UNIX epoch, January 1, 1970) when the query was verified.
    verified_by: # Optional: Name of the person who verified the query.
    use_as_onboarding_question:  # Optional: Marks this question as an onboarding question for the end user.
    expr:                         # The SQL query for answering the question
For an example specification, see the snow_tpch.yaml file.


Specification
This section contains detailed specifications for the key concepts described in the preceding sections.

Semantic Model
A semantic model represents a collection of tables. The model contains descriptions of tables, each of which contains descriptions of specifics aspects of the table. Each table described in the model maps to a physical base table in Snowflake.

It has the following fields:

Required

name
A descriptive name for this semantic model.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

Optional

These fields are not required, but should be included whenever possible.

description
A description of this semantic model, including details of what kind of analysis it’s useful for.

tables
A list of logical tables in this semantic model.

relationships
A list of joins between logical tables.

Logical table
You can think of a logical table as a view over a physical database table or view. It has the following fields:

Required

name
A descriptive name for this table.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

base_table
A fully qualified name of the underlying base table in the database.

Optional

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this table. It must be unique across synonyms within the logical table.

description
A description of this table.

primary_key
The primary key columns for this table. Required if you’re defining relationnships.

dimensions
A list of dimension columns in this table.

time_dimensions
A list of time dimension columns in this table.

facts
A list of fact columns in this table.

metrics
A list of metrics in this table.

filters
Predefined filters on this table, if any.

Dimension
A dimension describes categorical values such as state, user_type, platform, etc. It has the following fields:

Required

name
A descriptive name for this dimension.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

expr
The SQL expression for this dimension. This could be a reference to a physical column or a SQL expression with one or more columns from the underlying base table.

data_type
The data type of this dimension. For an overview of all data types in Snowflake see SQL data types reference. Note that VARIANT, OBJECT, GEOGRAPHY, and ARRAY are currently not supported.

Optional

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this dimension. Must be unique across all synonyms in this semantic model.

description
A brief description about this dimension, including what data it has.

unique
A boolean value that indicates this dimension has unique values.

sample_values
Sample values of this column, if any. Add any value that is likely to be referenced in the user questions.

cortex_search_service
Specifies the Cortex Search Service to use for this dimension. It has the following fields:

service: The name of the Cortex Search Service.

literal_column: (optional) The column in the Cortex Search Service that contains the literal values.

database: (optional) The database where the Cortex Search Service is located. Defaults to base_table’s database.

schema: (optional) The schema where the Cortex Search Service is located. Defaults to base_table’s schema.

This field replaces the cortex_search_service_name field, which could only specify the name. cortex_search_service_name has been deprecated.

is_enum
A Boolean value. If True, the values in the sample_values field are taken to be the full list of possible values, and the model only chooses from those values when filtering on that column.

Time Dimension
A time dimension describes time values, such as sale_date, created_at, and year. It has the following fields:

Required

name
A descriptive name for this time dimension.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

expr
The SQL expression for this column. This could be a reference to a physical column or a SQL expression with one or more columns from the underlying base table.

data_type
The data type of this time dimension. For an overview of all data types in Snowflake see SQL data types reference. Note that VARIANT, OBJECT, GEOGRAPHY, and ARRAY are currently not supported.

Optional

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this time dimension. Must be unique across all synonyms in this semantic model.

description
A brief description about this dimension, including what data it has. Provide information that’ll help someone writing queries using this table. For example, for DATETIME columns, specify the timezone of the data.

unique:
A boolean value that indicates this column has unique values.

sample_values:
Sample values of this column, if any. Add any values that are likely to be referenced in the user questions. This field is optional.

Fact
A fact describes numerical values, such as revenue, impressions, and salary. Facts used to be called measures in earlier releases of Cortex Analyst. Facts are backward compatible with measures. It has the following fields:

Required

name
A descriptive name for this fact.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

expr
This SQL expression can refer to either a physical column in the same logical table’s base physical table or a logical column (fact, dimension, or time dimension) within that logical table.

data_type
The data type of this fact. For an overview of all data types in Snowflake see SQL data types reference. Note that VARIANT, OBJECT, GEOGRAPHY, and ARRAY are currently not supported.

Optional)

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this measure. Must be unique across all synonyms in this semantic model.

description
A brief description about this measure, including what data this column has.

unique
A boolean value that indicates this column has unique values.

sample_values
Sample values of this column, if any. Add any values that are likely to be referenced in the user questions.

Filter
A filter represents a SQL expression that’s used for filtering. It has the following fields:

Required

name
A descriptive name for this filter.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

expr
The SQL expression of this filter, referencing logical columns.

Optional

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this filter. Must be unique across all synonyms in this semantic model.

description
A brief description about this filter, including details of what this filter is typically used for.

Metric
A metric describes quantifiable measures of business performance, such as total revenue, average order value, or customer count. It has the following fields:

Required

name
A descriptive name for this metric. It must be unique and follow the requirements of the unquoted identifiers. It also cannot conflict with Snowflake reserved keywords.

Must be unique and follow the unquoted identifiers requirements. It also cannot conflict with Snowflake reserved keywords.

expr
The SQL expression for this column. This could reference a logical column (fact, dimension, or time dimension) in the same logical table or a logical column from another logical table within the semantic model.

data_type
The data type of this metric. For an overview of all data types in Snowflake, see the reference for SQL data types. Note that VARIANT, OBJECT, GEOGRAPHY, and ARRAY are currently not supported.

Optional

These fields are not required, but should be included whenever possible.

synonyms
A list of other terms/phrases used to refer to this metric. It must be unique across all synonyms in this semantic model.

description
A brief description of this metric, including what data this column has.

sample_values
Sample values of this column, if any. Add any values that are likely to be referenced in the user questions.

Base Table
A base table is used to represent fully qualified table names. This is the physical table that a logical table maps to. It has the following fields:

Required

database
Name of the database.

schema
Name of the schema.

table
Name of the table.

Primary Key
A primary key represents the columns that uniquely represent each row of the table. The primary key is required if the table is used in a relationship. It has the following fields:

Required

columns
A list of dimension columns uniquely representing the table.

Relationships
Defines join relationships between logical tables. To ensure proper join functionality, primary keys must be defined for the tables involved in relationships. It has the following fields:

Required

name
A unique identifier for the relationship.

left_table
Logical table name as defined earlier in your YAML file. For many-to-one relationships, the left table should be the many side of the relationship for optimal performance.

right_table
Logical table name as defined earlier in your YAML file. For many-to-one relationships, the right table must be the one side of the relationship for optimal performance.

relationship_columns
A list of equal columns from each of the left table and right table representing the join path.

join_type
Either left_outer or inner.

relationship_type
Either many_to_one or one_to_one.

Verified Queries
See Cortex Analyst Verified Query Repository for information on the purpose and structure of this section of the YAML file.

Custom instructions
For infomation about custom instructions, see Custom instructions in Cortex Analyst.


### example semantic model ###

# Semantic model constructed by @Venks.Mantha
name: snow_tpch
description: >
  Order data from the TPCH dataset.
tables:
  - name: customers
    description: >
      The customers table contains details about individual customers, including their unique customer identifier, name, address, account balance, and market segment. 
      It is used to analyze customer demographics, purchasing behavior, and segmentation.  
      Join this table with orders and lineitem tables to track sales performance and customer order history.
    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: CUSTOMER
    dimensions:
      - name: customer_key
        description: Unique identifier for each customer.
        expr: C_CUSTKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - "1"
          - "60035"
          - "149891"
      - name: nation_key
        description: Foreign key from the nations table
        expr: C_NATIONKEY
        data_type: NUMBER
        sample_values:
          - '14'
          - '10'
      - name: customer_name
        synonyms:
          - "customer_name"
          - "customer"
        description: Name of the customer.
        expr: C_NAME
        data_type: TEXT
        sample_values:
          - Customer#000060003
          - Customer#000060007
      - name: customer_market_segment
        synonyms:
          - 'market segment'
        description: The market segment for this customer
        expr: C_MKTSEGMENT
        data_type: TEXT
        sample_values:
          - AUTOMOBILE
          - BUILDING
          - MACHINERY
          - HOUSEHOLD
          - FURNITURE

    measures:
      - name: customer_account_balance
        description: Customer account balance
        expr: C_ACCTBAL
        data_type: NUMBER
        sample_values:
          - "711.56"
          - "121.65"

    filters:
      - name: automobile_market_segment
        synonyms:
          - "Automobile Segment"
          - "Automobile Customers"
        description: "A filter to retrieve customers in the AUTOMOBILE market segment."
        expr: customer_market_segment = "AUTOMOBILE"

      - name: top_10_customers_by_higest_account_balance
        synonyms:
          - "Top 10 highest customer balance"
        description: "A filter to retrieve the top 10 customers with the highest account balance."
        expr: >
          customer_key IN (
            SELECT customer_key 
            FROM __customers 
            ORDER BY customer_account_balance DESC 
            LIMIT 10
          )

    primary_key:
      columns:
        - customer_key

  - name: order_lineitems
    description: >
      The lineitems table contains details of individual items within orders, including part numbers, quantities, and discounts. 

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: LINEITEM

    dimensions:
      - name: order_key
        description: Foreign key column from the Orders table
        expr: L_ORDERKEY
        data_type: NUMBER
        sample_values:
          - '1800164'
          - '1800193'
      - name: order_lineitem_number
        description: Line Item Number within each order. Combined with order_key this forms the unique key for order_lineitems table
        expr: L_LINENUMBER
        data_type: NUMBER
        sample_values:
          - '4'
          - '1'
      - name: part_key
        description: Part Key
        expr: L_PARTKEY
        data_type: NUMBER
        sample_values:
          - '22275'
          - '106173'
      - name: supplier_key
        description: Supplier Key
        expr: L_SUPPKEY
        data_type: NUMBER
        sample_values:
          - '1525'
          - '9327'
      - name: lineitem_return_flag
        synonyms:
          - 'item return flag'
          - 'item return indicator'
        description: Return Flag for Line Item
        expr: L_RETURNFLAG
        data_type: TEXT
        sample_values:
          - 'N'
          - A
          - R
      - name: lineitem_status
        synonyms:
          - 'item status'
        description: Order Line Item Fulfillment Status
        expr: L_LINESTATUS
        data_type: TEXT
        sample_values:
          - O
          - F
      - name: lineitem_shipping_instructions
        synonyms:
          - 'ship instruction code'
          - 'shipping instruction'
        description: Shipping Instructions
        expr: L_SHIPINSTRUCT
        data_type: TEXT
        sample_values:
          - COLLECT COD
          - NONE
          - DELIVER IN PERSON
          - TAKE BACK RETURN
      - name: lineitem_shipping_mode
        synonyms:
          - 'lineitem shipping mode'
          - 'item shipp mode'
        description: Order Lineitem Shipping Mode
        expr: L_SHIPMODE
        data_type: TEXT
        sample_values:
          - AIR
          - FOB
          - MAIL
          - REG AIR
          - TRUCK
          - SHIP
          - RAIL

    time_dimensions:
      - name: lineitem_ship_date
        synonyms:
          - 'item ship date'
          - 'item shipping date'
        description: Order line item Date of shipment
        expr: L_SHIPDATE
        data_type: DATE
        sample_values:
          - '1996-01-19'
          - '1997-08-19'
      - name: lineitem_commit_date
        synonyms:
          - 'item commit date'
        description: Order lineitem Date of Commitment
        expr: L_COMMITDATE
        data_type: DATE
        sample_values:
          - '1992-05-20'
          - '1994-01-03'
      - name: lineitem_receipt_date
        synonyms:
          - 'item receipt date'
        description: Date of receipt for each order line item
        expr: L_RECEIPTDATE
        data_type: DATE
        sample_values:
          - '1997-06-10'
          - '1998-03-23'

    measures:
      - name: lineitem_quantity
        synonyms:
          - 'item quantity'
        description: Quantity of items ordered
        expr: L_QUANTITY
        data_type: NUMBER
        default_aggregation: sum
        sample_values:
          - '48.00'
          - '38.00'
      - name: lineitem_extended_price
        synonyms:
          - 'item extended price'
          - 'net revenue pre discount'
          - 'base price'
        description: Extended price of the Order Line Item for all of the lineitem quantity. This number is before tax and discount.
        expr: L_EXTENDEDPRICE
        data_type: NUMBER
        default_aggregation: sum
        sample_values:
          - '61821.92'
          - '43098.84'
      - name: lineitem_discount
        synonyms:
          - 'discount'
        description: Discount percentage applied to each order line item
        expr: L_DISCOUNT
        data_type: NUMBER
        sample_values:
          - '0.05'
          - '0.01'
      - name: lineitem_tax
        synonyms:
          - 'item tax'
        description: Order lineitem Sales Tax Rate
        expr: L_TAX
        data_type: NUMBER
        sample_values:
          - '0.04'
          - '0.07'
      - name: net_revenue
        synonyms:
          - 'revenue'
          - 'discounted price'
          - 'net price'
        description: The net extended price of the order line after discount, but before tax.
        expr: l_extendedprice * (1 - l_discount)
        data_type: NUMBER
        default_aggregation: sum
      - name: gross_revenue
        synonyms:
          - 'total_price'
          - 'revenue after tax'
        description: The net extended price of the order line after discount, but before tax.
        expr: l_extendedprice * (1 - l_discount) * (1+l_tax)
        data_type: NUMBER
        default_aggregation: sum
      - name: avg_unit_price
        synonyms:
          - 'average price'
          - 'average unit price'
        description: Average price of order line items. Use this calculate average prices when aggregating
        data_type: NUMBER
        expr: DIV0(SUM(net_revenue) , SUM(lineitem_quantity))
      - name: order_line_item_cost
        synonyms:
          - 'cogs'
          - 'cost of goods sold'
        expr: part_suppliers.part_supplier_cost * order_lineitems.lineitem_quantity
        description: The cost of each line item in an order. This metric is additive and can be further aggregated.
        data_type: NUMBER

    metrics:
      - name: total_profit
        expr: SUM(order_lineitems.net_revenue) - SUM(part_suppliers.part_supplier_cost * order_lineitems.lineitem_quantity)
        description: The total profit from orders. Profit is always calculated with net revenue (no tax). This metric is additive and can be further aggregated.
      - name: total_profit_margin
        expr: (SUM(order_lineitems.net_revenue) - SUM(part_suppliers.part_supplier_cost * order_lineitems.lineitem_quantity)) /  SUM(order_lineitems.net_revenue)
        description: The profit margin from orders. This metric is not additive, and should always be calculated again from the base tables.

    primary_key:
      columns:
        - order_key
        - order_lineitem_number

  - name: orders
    description: >
      The orders table contains information about customer orders, including the order date, priority, and status. 

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: ORDERS

    dimensions:
      - name: order_key
        description: Unique identifier for each order
        expr: O_ORDERKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - '1800006'
          - '1800864'
      - name: customer_key
        description: Foreign key from Customer Table
        expr: O_CUSTKEY
        data_type: NUMBER
        sample_values:
          - '44485'
          - '129200'
      - name: order_status
        description: Order Status
        expr: O_ORDERSTATUS
        data_type: TEXT
        sample_values:
          - P
          - O
          - F
      - name: order_priority
        description: Priority level assigned to an order
        expr: O_ORDERPRIORITY
        data_type: TEXT
        sample_values:
          - 1-URGENT
          - 2-HIGH
          - 3-MEDIUM
          - 4-NOT SPECIFIED
          - 5-LOW

    time_dimensions:
      - name: order_date
        description: Date of Order
        expr: O_ORDERDATE
        data_type: DATE
        sample_values:
          - '1995-12-27'
          - '1995-09-22'

    measures:
      - name: order_gross_total
        synonyms:
          - 'order total price'
          - 'order total with tax'
        description: Total Order Value after discount and including taxes. This is the sum of gross_revenue for all line items in the order.
        expr: O_TOTALPRICE
        data_type: NUMBER
        default_aggregation: sum
        sample_values:
          - '294964.49'
          - '225465.88'
      - name: order_ship_priority
        synonyms:
          - 'shipping priority'
        description: Shipping Priority of the Order
        expr: O_SHIPPRIORITY
        data_type: NUMBER
        sample_values:
          - '0'
      - name: total_orders
        description: The total number of orders.
        expr: COUNT(*)
        data_type: NUMBER

    primary_key:
      columns:
        - order_key

    filters:
      - name: 'Yesterday'
        synonyms:
          - 'Prior Day'
          - 'Day before'
          - 'Previous Day'
        description: 'A filter to restrict data to only yesterday.'
        expr: order_date = '1998-08-01'
      - name: 'YTD'
        synonyms:
          - 'This Year'
          - 'Current Year'
          - 'Year to Date'
          - 'TY'
        description: 'A filter to restrict data to only current fiscal year.'
        expr: DATE_PART('YEAR', order_date) = '1998'

  - name: part_suppliers
    description: >
      The partsupp table contains information linking parts to suppliers, including part keys, supplier keys, and supply costs.

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: PARTSUPP

    dimensions:
      - name: part_key
        description: Foreign key from the parts table
        expr: PS_PARTKEY
        data_type: NUMBER
        sample_values:
          - '20001'
          - '20007'
      - name: supplier_key
        description: Foreign key from the supplier table
        expr: PS_SUPPKEY
        data_type: NUMBER
        sample_values:
          - '5031'
          - '2525'

    measures:
      - name: available_quantity
        description: The inventory of parts in stock for each supplier
        synonyms:
          - 'available quantity'
          - 'inventory'
          - 'stock'
        expr: PS_AVAILQTY
        data_type: NUMBER
        sample_values:
          - '3818'
          - '8666'
      - name: part_supplier_cost
        synonyms:
          - 'supplier cost'
          - 'part cost'
        description: The cost of the part from a given supplier
        expr: PS_SUPPLYCOST
        data_type: NUMBER
        sample_values:
          - '195.44'
          - '630.37'
      - name: inventory_days_outstanding
        expr:  (part_suppliers.available_quantity / sum(order_lineitems.lineitem_quantity)) * 365 
        description: days outstanding of inventory. the sum of sales quantity must be for a year period of time to multiply by 365. If summming a different time period, adjust the multiplier accordingly. 
        data_type: NUMBER
    primary_key:
      columns:
        - part_key
        - supplier_key

  - name: parts
    description: >
      The parts table contains details about parts that suppliers offer, including unique part keys, names, and types.
      A part could be supplied from multple suppliers. 

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: PART     

    dimensions:
      - name: part_key
        description: Unique identifier for each part
        expr: P_PARTKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - '120002'
          - '120003'
      - name: part_name
        description: name of the parts
        expr: P_NAME
        data_type: TEXT
        sample_values:
          - yellow hot rose blue green
          - yellow pale blanched gainsboro moccasin
          - turquoise floral papaya steel blanched
          - maroon olive sky honeydew sienna
          - forest rose orchid mint lime
          - deep coral honeydew cornsilk dodger
          - seashell ghost grey red mint
          - sandy medium red rose coral
          - orange frosted azure rosy goldenrod
          - salmon cream deep hot white
          - beige grey honeydew coral burlywood
          - puff pale metallic cream red
          - rosy burnished tomato goldenrod gainsboro
          - lime antique rose seashell magenta
          - saddle azure steel magenta dark
          - puff firebrick spring peru cornflower
          - bisque ghost spring blanched frosted
          - papaya dark forest chocolate olive
          - midnight linen orange dark plum
          - blanched grey blush sandy dim
          - chocolate lemon linen aquamarine beige
          - firebrick goldenrod sky maroon forest
          - violet thistle olive sandy indian
          - grey bisque pink honeydew papaya
          - blue pale antique thistle sky
      - name: part_manufacturer_name
        synonyms:
          - 'manufacturer'
        description: Manufacture name of this part
        expr: P_MFGR
        data_type: TEXT
        sample_values:
          - Manufacturer#3
          - Manufacturer#1
          - Manufacturer#4
      - name: part_brand
        description: Brand Names of the part
        expr: P_BRAND
        data_type: TEXT
        sample_values:
          - Brand#15
          - Brand#24
          - Brand#25
      - name: part_type
        description: type of the part
        expr: P_TYPE
        data_type: TEXT
        cortex_search_service_name: my_part_types_search_service
      - name: part_container
        description: Container Types for each part
        expr: P_CONTAINER
        data_type: TEXT
        sample_values:
          - WRAP CAN
          - SM DRUM
          - LG JAR
          - WRAP JAR
          - SM PKG
          - JUMBO BOX
          - JUMBO DRUM
          - MED PKG
          - SM BOX
          - LG PKG
          - JUMBO CAN
          - WRAP PACK
          - MED CASE
          - JUMBO JAR
          - SM PACK
          - WRAP CASE
          - LG CASE
          - SM BAG
          - LG DRUM
          - MED BAG
          - LG CAN
          - WRAP BOX
          - JUMBO BAG
          - SM CAN
          - MED DRUM
      - name: part_size
        description: Size of the part
        expr: P_SIZE
        data_type: NUMBER
        sample_values:
          - '38'
          - '48'
          - '41'
          - '45'
          - '46'

    measures:
      - name: part_retail_price
        synonyms:
          - 'part price'
        description: Retail Price of the part
        expr: P_RETAILPRICE
        data_type: NUMBER
        sample_values:
          - '1021.00'
          - '1023.00'
          - '1027.00'
      - name: total_parts
        description: The total number of parts.
        expr: COUNT(*)
        data_type: NUMBER
        default_aggregation: count

    primary_key:
      columns:
        - part_key

  - name: suppliers
    description: >
      The suppliers table contains details about suppliers, including unique supplier keys, supplier names, addresses, and associated nations.

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: SUPPLIER

    dimensions:
      - name: supplier_key
        description: Unique identifier for each supplier
        expr: S_SUPPKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - '1'
          - '2'
      - name: supplier_name
        description: Name of the supplier
        expr: S_NAME
        data_type: TEXT
        sample_values:
          - Supplier#000000001
          - Supplier#000000002
      - name: nation_key
        description: Foreign key from the nations table
        expr: S_NATIONKEY
        data_type: NUMBER
        sample_values:
          - '17'
          - '5'
          - '1'

    measures:
      - name: supplier_account_balance
        synonyms:
          - 'supplier balance'
        description: Supplier Account Balance
        expr: S_ACCTBAL
        data_type: NUMBER
        sample_values:
          - '5755.94'
          - '4032.68'

    primary_key:
      columns:
        - supplier_key

  - name: nations
    description: >
      The nations table contains details about various countries, including a unique identifier for each nation, its name, and a reference to the region it belongs to. 
      Each nation is uniquely identified by N_NATIONKEY.

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: NATION

    dimensions:
      - name: nation_key
        description: Unique identifier for each nation
        expr: N_NATIONKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - '0'
          - '1'
          - '2'
      - name: region_key
        description: Foreign key from the regions table
        expr: N_REGIONKEY
        data_type: NUMBER
        sample_values:
          - '2'
          - '4'
      - name: nation_name
        description: List of nations/countries
        expr: N_NAME
        data_type: TEXT
        sample_values:
          - ALGERIA
          - ARGENTINA
          - BRAZIL
          - CANADA
          - EGYPT
          - ETHIOPIA
          - FRANCE
          - GERMANY
          - INDIA
          - INDONESIA
          - IRAQ
          - JORDAN
          - KENYA
          - MOROCCO
          - PERU
          - SAUDI ARABIA
          - UNITED STATES
          - RUSSIA
          - UNITED KINGDOM
          - MOZAMBIQUE
          - VIETNAM
          - IRAN
          - JAPAN
          - CHINA
          - ROMANIA

    filters:
      - name: 'North America'
        synonyms:
          - 'NA'
        description: 'A filter to restrict data to only North American Continent'
        expr: nation_name IN ('UNITED STATES','CANADA')

    primary_key:
      columns:
        - nation_key

  - name: regions
    description: >
      The regions table contains details about various geographic regions, each uniquely identified by a region key. 
      Each region can have multiple nations associated with it. There are a total of 5 regions.

    base_table:
      database: SNOWFLAKE_SAMPLE_DATA
      schema: TPCH_SF1
      table: REGION

    dimensions:
      - name: region_key
        description: Unique identifier for Region
        expr: R_REGIONKEY
        data_type: NUMBER
        unique: true
        sample_values:
          - '0'
          - '1'
          - '2'
          - '3'
          - '4'
      - name: region_name
        description: Geographic region of the world. Name of the region.
        expr: R_NAME
        data_type: TEXT
        sample_values:
          - AFRICA
          - AMERICA
          - ASIA
          - EUROPE
          - MIDDLE EAST

    measures:
      - name: total_regions
        description: The total number of regions.
        expr: COUNT(*)
        data_type: NUMBER
        default_aggregation: count

    primary_key:
      columns:
        - region_key



relationships:

  - name: nations_to_regions
    left_table: nations
    right_table: regions
    relationship_columns:
      - left_column: region_key
        right_column: region_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: suppliers_to_nations
    left_table: suppliers
    right_table: nations
    relationship_columns:
      - left_column: nation_key
        right_column: nation_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: customers_to_nations
    left_table: customers
    right_table: nations
    relationship_columns:
      - left_column: nation_key
        right_column: nation_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: orders_to_customers
    left_table: orders
    right_table: customers
    relationship_columns:
      - left_column: customer_key
        right_column: customer_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: lineitems_to_orders
    left_table: order_lineitems
    right_table: orders
    relationship_columns:
      - left_column: order_key
        right_column: order_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: part_suppliers_to_part
    left_table: part_suppliers
    right_table: parts
    relationship_columns:
      - left_column: part_key
        right_column: part_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: part_suppliers_to_supplier
    left_table: part_suppliers
    right_table: suppliers
    relationship_columns:
      - left_column: supplier_key
        right_column: supplier_key
    join_type: left_outer
    relationship_type: many_to_one

  - name: order_lineitems_to_part_suppliers
    left_table: order_lineitems
    right_table: part_suppliers
    relationship_columns:
      - left_column: part_key
        right_column: part_key
      - left_column: supplier_key
        right_column: supplier_key
    join_type: left_outer
    relationship_type: many_to_one
